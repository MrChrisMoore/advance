/* tslint:disable */
/* eslint-disable */
/**
 * FST Data Access API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: V1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    LoginModel,
    LoginModelFromJSON,
    LoginModelToJSON,
    LoginSuccessResponse,
    LoginSuccessResponseFromJSON,
    LoginSuccessResponseToJSON,
    NotFoundResponse,
    NotFoundResponseFromJSON,
    NotFoundResponseToJSON,
    VerificationCodeModel,
    VerificationCodeModelFromJSON,
    VerificationCodeModelToJSON,
} from '../models';

export interface GetAuthSmsRequest {
    phone: string;
}

export interface GetAuthVerificationsRequest {
    id: string;
}

export interface PostAuthLoginRequest {
    body?: LoginModel;
}

export interface PostAuthSmsRequest {
    body?: VerificationCodeModel;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Returns the user obj if logged in 
     * Check If User is logged in
     */
    async getAuthRaw(): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/auth`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Returns the user obj if logged in 
     * Check If User is logged in
     */
    async getAuth(): Promise<string> {
        const response = await this.getAuthRaw();
        return await response.value();
    }

    /**
     * Calls twilio to send the code to the user
     * Make the request to twilio to send the verification code to the user
     */
    async getAuthSmsRaw(requestParameters: GetAuthSmsRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.phone === null || requestParameters.phone === undefined) {
            throw new runtime.RequiredError('phone','Required parameter requestParameters.phone was null or undefined when calling getAuthSms.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.phone !== undefined) {
            queryParameters['phone'] = requestParameters.phone;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/auth/sms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Calls twilio to send the code to the user
     * Make the request to twilio to send the verification code to the user
     */
    async getAuthSms(requestParameters: GetAuthSmsRequest): Promise<string> {
        const response = await this.getAuthSmsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get pending status for provided verification sid
     */
    async getAuthVerificationsRaw(requestParameters: GetAuthVerificationsRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAuthVerifications.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/auth/verifications/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Get pending status for provided verification sid
     */
    async getAuthVerifications(requestParameters: GetAuthVerificationsRequest): Promise<string> {
        const response = await this.getAuthVerificationsRaw(requestParameters);
        return await response.value();
    }

    /**
     * I will be the login route
     * Login Placeholder.
     */
    async postAuthLoginRaw(requestParameters: PostAuthLoginRequest): Promise<runtime.ApiResponse<LoginSuccessResponse>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginModelToJSON(requestParameters.body),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginSuccessResponseFromJSON(jsonValue));
    }

    /**
     * I will be the login route
     * Login Placeholder.
     */
    async postAuthLogin(requestParameters: PostAuthLoginRequest): Promise<LoginSuccessResponse> {
        const response = await this.postAuthLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     * Send the code
     * Send the verification token to twilio to verify
     */
    async postAuthSmsRaw(requestParameters: PostAuthSmsRequest): Promise<runtime.ApiResponse<string>> {
        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // jwt authentication
        }

        const response = await this.request({
            path: `/auth/sms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerificationCodeModelToJSON(requestParameters.body),
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Send the code
     * Send the verification token to twilio to verify
     */
    async postAuthSms(requestParameters: PostAuthSmsRequest): Promise<string> {
        const response = await this.postAuthSmsRaw(requestParameters);
        return await response.value();
    }

}
